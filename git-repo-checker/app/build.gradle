/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.13/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'com.gradleup.shadow'
}

dependencies {
    // This dependency is used by the application.
    implementation(libs.guava)
    implementation(libs.jgit)
    implementation(libs.slf4j.log4j12)

    // Use JUnit test framework.
    testImplementation(libs.junit)
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'org.example.GitRepoChecker'
}

jar {
    manifest {
        // Keep jar clean:
        exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA', 'META-INF/*.MF'

        attributes 'Main-Class': application.mainClass,
                'Class-Path': configurations.runtimeClasspath.files.collect { "lib/$it.name" }.join(' ')

    }
}

tasks.register("runGitRepoChecker", JavaExec) {
    group = "application"
    description = "Runs the Git repository checker."
    dependsOn("classes")
    mainClass = "org.example.GitRepoChecker"
    classpath = sourceSets.main.runtimeClasspath
    if (System.getProperty("directory") != null) {
        println("Args: " + System.getProperty("directory"))
        args System.getProperty("directory")
    }
}

tasks.register("listConfigs") {
    configurations.named("runtimeClasspath")
        .get()
        .join(" ")
        .eachLine { println(it) }
    configurations.each {
        println(it)
    }
}
